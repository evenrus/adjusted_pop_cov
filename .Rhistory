# Setup
knitr::opts_chunk$set(echo = TRUE)
options("scipen"=50, "digits"=4, warning=FALSE)
# load packages
packages <- c("tidyverse", "reshape2", "openxlsx", "RColorBrewer",  "stringi", "gdata")
invisible(suppressWarnings(suppressMessages(lapply(packages, library, character.only = TRUE))))
# custom functions
rotatedAxisElementText = function(angle,position='x'){
angle     = angle[1];
position  = position[1]
positions = list(x=0,y=90,top=180,right=270)
if(!position %in% names(positions))
stop(sprintf("'position' must be one of [%s]",paste(names(positions),collapse=", ")),call.=FALSE)
if(!is.numeric(angle))
stop("'angle' must be numeric",call.=FALSE)
rads  = (angle - positions[[ position ]])*pi/180
hjust = 0.5*(1 - sin(rads))
vjust = 0.5*(1 + cos(rads))
element_text(angle=angle,vjust=vjust,hjust=hjust)
}
# calculate the probability of one or more responses to epitopes presented on a given HLA allele combination
# takes as input a vector of two HLA alleles (allele_set) and a data frame of immunoprevalence for the included set of epitopes
get_allele_comb_prob <- function(allele_set, immunoprev){
e_set <- immunoprev[immunoprev$HLA %in% allele_set,]$prop
# if only a single epitope from a given combination, then the probability of one or more responses is equal to the probability of one response
if(length(e_set) == 1) {
return(e_set)
}
no_response_prob <- 1-e_set
product <- no_response_prob[1]
for(i in 2:length(no_response_prob)){
product <- product*no_response_prob[i]
}
out <- ifelse(length(1-product) == 0, 0, 1-product)
return(out)
}
# calculate the population prevalence of each combination of HLA alleles, including "other" HLA-alleles not present in the input.
# takes as input a vector of HLA alleles to include (allele_vector) and a file with allele prevalence data (allele_freq_df)
get_allele_comb_prevalence <- function(allele_vector, allele_freq_df){
hla_sub <- filter(allele_freq_df, Allele %in% allele_vector)
freq_vector <- hla_sub$freq
names(freq_vector) <- hla_sub$Allele
freq_vector["UNKNOWN"] <- 1-sum(freq_vector)
freq_mat <- freq_vector %*% t(freq_vector)
rownames(freq_mat) <- colnames(freq_mat)
freq_mat_vector <- unmatrix(freq_mat)
return(freq_mat_vector)
}
# takes a vector of HLA alleles, returns a list of every possible combination of two HLA alleles from the input vector
make_allele_comb_list <- function(allele_vector){
allele_comb_list <- list()
for(i in allele_vector){
for(j in allele_vector)
allele_comb_list[[paste(i,j, sep = ":")]] <- c(i,j)
}
return(allele_comb_list)
}
# LOCUS SPECIFIC FUNCTION
get_locus_coverage <- function(locus, locus_epitope_df, allele_freq_df) {
locus_epitope_set <- locus_epitope_df %>% filter(grepl(locus, HLA))
allele_vector <- unique(locus_epitope_set$HLA)
# allele combination prevalence
freq_mat_vector <- get_allele_comb_prevalence(allele_vector = allele_vector,
allele_freq_df = allele_freq_df)
# all allele combinations, including UNKNOWN
allele_comb_list <- make_allele_comb_list(allele_vector = c(allele_vector, "UNKNOWN"))
# probability of one or more epitope response for allele combinations
allele_comb_probs <- unlist(lapply(allele_comb_list, function(x) get_allele_comb_prob(allele_set = x, immunoprev = locus_epitope_set)))
# allele combination prevalence adjusted by probability of one or more epitope response
freq_mat_vector <- freq_mat_vector[names(allele_comb_probs)]
prev_adjusted_freq <- freq_mat_vector * allele_comb_probs
# locus response population coverage
locus_coverage <- sum(prev_adjusted_freq)
return(locus_coverage)
}
# bootstrapping sets of immunoprevalence estimates from the beta distribution
# using the same approach as employed to calculate exact binomial confidence intervals (binom.test)
get_bootstrap_dataset <- function(epi_data, n_bootstrap){
epi_boot <- list()
for(i in 1:nrow(epi_data)){
n_success <- epi_data$N_response[i]
n_failure <- epi_data$N_tested[i] - n_success + 1
boot_prop <- rbeta(n = n_bootstrap, shape1 = n_success, shape2 = n_failure)
tmp_out <- data.frame(Sequence = rep(epi_data$Sequence[i], n_bootstrap),
HLA = rep(epi_data$HLA[i], n_bootstrap),
epitope_ID = rep(epi_data$epitope_ID[i], n_bootstrap),
iter = 1:n_bootstrap,
prop = boot_prop)
epi_boot[[i]] <- tmp_out
}
epi_boot <- bind_rows(epi_boot)
return(epi_boot)
}
# run all analysis and combine loci -- returning total population coverage
get_combined_coverage <- function(epitopes, allele_freq){
# HLA A coverage
coverage_A <- get_locus_coverage(locus = "HLA-A", locus_epitope_df = epitopes, allele_freq_df = allele_freq)
# HLA B coverage
coverage_B <- get_locus_coverage(locus = "HLA-B", locus_epitope_df = epitopes, allele_freq_df = allele_freq)
# COMBINED
# probability of no hits on both HLA A and B
prob_no_hits <- (1-coverage_A) * (1-coverage_B)
# probability of at least one hit
coverage_combined <- 1-prob_no_hits
return(coverage_combined)
}
get_population_coverage <- function(epitopes, allele_freq, bootstrap = TRUE, n_bootstrap = 100, conf.level = 0.95){
out <- list()
# point estimate
out$est <- get_combined_coverage(epitopes = epitopes, allele_freq = allele_freq)
# bootstrapping confidence interval
if(bootstrap){
epi_boot_dataset <- get_bootstrap_dataset(epitopes, n_bootstrap)
pop_cov_boot <- list()
for(i in 1:max(epi_boot_dataset$iter)){
epi_boot_sub <- filter(epi_boot_dataset, iter == i)
pop_cov_boot[[i]] <- get_combined_coverage(epitopes = epi_boot_sub, allele_freq = allele_freq)
}
pop_cov_boot <- unlist(pop_cov_boot)
# confidence interval
alpha <- (1 - conf.level) / 2
out$conf.int <- quantile(probs = c(alpha, 1-alpha), pop_cov_boot)
# add raw bootstrap values
out$boot_data <- epi_boot_dataset
out$boot <- unlist(pop_cov_boot)
}
out$data <- epitopes
return(out)
}
# EPITOPES
epitopes <- read.xlsx("./data/210905_tetramer_results_summary.xlsx") %>%
mutate(HLA_short = paste(unlist(strsplit(stri_sub(HLA), ""))[c(1,3)], collapse = ""),
epitope_ID = paste(HLA_short, Peptide_pos),
HLA = paste0("HLA-",
stri_sub(HLA, 0, 1),
"*",
stri_sub(HLA, 2, 6)),
prop = SARSpos_percent/100) %>%
dplyr::rename(N_tested = SARS_total,
N_response = SARSpos_n)
epi_sub <- epitopes %>%
dplyr::select(Sequence, HLA, prop, N_tested, N_response, epitope_ID) %>%
filter(prop >= 0.7)
head(epi_sub)
# IEDB
iedb <-  read.xlsx("./data/210919_IEDB_all_epitopes_alleles.xlsx") %>%
dplyr::rename(N_response = N_responded,
prop = immunoprevalence,
HLA = Allele.Name) %>%
mutate(HLA_short = gsub(".*-", "", HLA),
HLA_short = gsub("\\*", "", HLA_short),
HLA_short = paste(unlist(strsplit(stri_sub(HLA_short), ""))[c(1,3)], collapse = ""),
epitope_ID = paste(HLA_short, Sequence)) %>%
filter(N_tested >= 20 | N_studies > 1,
prop > 0,
HLA %in% c("HLA-A*01:01", "HLA-A*02:01", "HLA-A*03:01", "HLA-B*07:02")) %>%
dplyr::select(Sequence, HLA, prop, N_tested, N_response, epitope_ID, N_studies)
head(iedb)
# randomly generate IEDB subsets
sub_hla_counts <- as.data.frame(table(epi_sub$HLA), stringsAsFactors = F)
names(sub_hla_counts) <- c("HLA", "count")
iedb_random <- list()
n_subsets <- 1000
for(i in 1:n_subsets){
tmp_df <- data.frame(matrix(ncol = ncol(iedb), nrow = 0))
names(tmp_df) <- names(iedb)
for(j in 1:nrow(sub_hla_counts)){
n_sub <- sub_hla_counts$count[j]
hla_sub <- sub_hla_counts$HLA[j]
random_subset <- iedb %>%
filter(HLA == hla_sub) %>%
sample_n(n_sub)
tmp_df <- rbind(tmp_df,
random_subset)
}
iedb_random[[i]] <- tmp_df
}
allele_freq_df <- data.frame(Locus = c("A", "A", "A", "B", "B"),
Allele = c("HLA-A*01:01", "HLA-A*02:01", "HLA-A*03:01", "HLA-B*07:02", "HLA-B*08:01"),
freq = c(0.13784436926051238, 0.2720154664088933, 0.13426776220396333, 0.11373185637891531, 0.09300993124522546))
write.xlsx(allele_freq_df, "./data/european_alleles_freq.xlsx")
allele_freq_df
allele_freq_df <- read.xlsx("./data/european_alleles_freq.xlsx")
allele_freq_df
# EPITOPES
epitopes <- read.xlsx("./data/210905_tetramer_results_summary.xlsx") %>%
mutate(HLA_short = paste(unlist(strsplit(stri_sub(HLA), ""))[c(1,3)], collapse = ""),
epitope_ID = paste(HLA_short, Peptide_pos),
HLA = paste0("HLA-",
stri_sub(HLA, 0, 1),
"*",
stri_sub(HLA, 2, 6)),
prop = SARSpos_percent/100) %>%
dplyr::rename(N_tested = SARS_total,
N_response = SARSpos_n)
epi_sub <- epitopes %>%
dplyr::select(Sequence, HLA, prop, N_tested, N_response, epitope_ID) %>%
filter(prop >= 0.7)
head(epi_sub)
write.xlsx(epi_sub, "./data/top_epitopes_this_study.xlsx")
epi_sub
epi_sub <- read.xlsx("./data/top_epitopes_this_study.xlsx")
epi_sub
write.xlsx(iedb, "./data/epitopes_iedb.xlsx")
# IEDB
iedb <-  read.xlsx("./data/epitopes_iedb.xlsx")
head(iedb)
table(iedb$HLA)
Sys.info()
R.version()
R.version
# Setup
knitr::opts_chunk$set(echo = TRUE)
options("scipen"=50, "digits"=4, warning=FALSE)
packages <- c("tidyverse", "reshape2", "openxlsx", "RColorBrewer",  "stringi", "gdata")
invisible(suppressWarnings(suppressMessages(lapply(packages, library, character.only = TRUE))))
sessionInfo()
knit_with_parameters("~/Dropbox/Forskning/Projects/COVID/analysis/supplementary_data/adjusted_population_coverage.Rmd")
system()
os.system()
sys.info()
